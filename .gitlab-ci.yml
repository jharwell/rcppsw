default:
  image: docker.sift.net/jharwell/rcppsw/ubuntu-22.04:latest

before_script:
  # Run minimal bootstrap to get TICPP
  - git clone https://gitlab-deploy-token:${BOOTSTRAP_DEPLOY_TOKEN}@git.sift.net/jharwell/bootstrap.git
  - cd bootstrap
  - ./bootstrap.sh
    --rprefix=$HOME/.local
    --rroot=.
    --disablerepo rcsw
    --disablerepo rcppsw
    --disablerepo cosm
    --disablerepo fordyca
    --disablerepo argos
    --disablerepo sierra
    --disablerepo titerra
    --force

  - cd ..

  # Install RCSW so RCPPSW can find it
  - git clone https://oauth2:${JHARWELL_CI_TOKEN}@git.sift.net/jharwell/rcsw.git
  - cd rcsw
  - git checkout devel
  - git submodule set-url libra ../libra.git
  - git submodule sync --recursive
  - git submodule foreach --recursive git fetch
  - git submodule update --init
  - mkdir build && cd build
  - cmake
    -DCMAKE_INSTALL_PREFIX=/usr/local
    -DCMAKE_BUILD_TYPE=DEV
    ..
  - JOBS=$(grep -c ^processor /proc/cpuinfo)
  - make -j${JOBS} install

  - cd ../..

# If all tests pass, deploy.
stages:
  - build-and-test
  - package-and-deploy

################################################################################
# Job to build and run tests
################################################################################
build-and-test:
  tags:
    - docker
  stage: build-and-test
  coverage: /Total:\|(\d+\.?\d+\%)/

  script:
    # Build RCPPSW
    - git submodule set-url libra ../libra.git
    - git submodule sync --recursive
    - git submodule foreach --recursive git fetch
    - git submodule update --init

    - mkdir -p build && cd build

    - cmake
      -DCMAKE_INSTALL_PREFIX=/usr/local
      -DCMAKE_BUILD_TYPE=DEV
      -DRCPPSW_AL_MT_SAFE_TYPES=YES
      -DLIBRA_TESTS=yes
      -DLIBRA_CODE_COV=YES
      -DLIBRA_ER=ALL
      ..

    # Run tests
    - make build-and-test
    - make coverage-report
    - lcov --list coverage.info # put coverage on stdout so the regex will parse it

################################################################################
# Jobs to build and upload packages
################################################################################
package-and-deploy:
  stage: package-and-deploy

  tags:
    - docker

  only:
    - master
    - devel

  script:
    - git submodule set-url libra ../libra.git
    - git submodule sync --recursive
    - git submodule foreach --recursive git fetch
    - git submodule update --init

    - mkdir -p build && cd build

    - cmake
      -DCMAKE_INSTALL_PREFIX=/usr/local
      -DCMAKE_BUILD_TYPE=DEV
      -DLIBRA_ER=ALL
      ..
    - JOBS=$(nproc)
    - make -j${JOBS}
    - make package

    - VERSION_MAJOR=$(sed -nE 's/.*PROJECT_VERSION_MAJOR ([0-9]+).*/\1/p' ../cmake/project-local.cmake)
    - VERSION_MINOR=$(sed -nE 's/.*PROJECT_VERSION_MINOR ([0-9]+).*/\1/p' ../cmake/project-local.cmake)
    - VERSION_PATCH=$(sed -nE 's/.*PROJECT_VERSION_PATCH ([0-9]+).*/\1/p' ../cmake/project-local.cmake)
    - PACKAGE_VERSION=$VERSION_MAJOR.$VERSION_MINOR.$VERSION_PATCH
    - RCPPSW_DEB_PACKAGE=$(ls *.deb)
    - RCPPSW_TGZ_PACKAGE=$(ls *.tar.gz)
    - PACKAGE_REGISTRY_URL="${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/rcppsw/${PACKAGE_VERSION}"
    - |
        curl --header "JOB-TOKEN: ${CI_JOB_TOKEN}" --upload-file ${RCPPSW_DEB_PACKAGE} ${PACKAGE_REGISTRY_URL}/${RCPPSW_DEB_PACKAGE}
    - |
        curl --header "JOB-TOKEN: ${CI_JOB_TOKEN}" --upload-file ${RCPPSW_TGZ_PACKAGE} ${PACKAGE_REGISTRY_URL}/${RCPPSW_TGZ_PACKAGE}

    - BETA_TAG_VERSION=${PACKAGE_VERSION}.beta
    - BETA_TAG_MESSAGE="Development release ${BETA_TAG_VERSION}"
    - git config --global user.email "${GITLAB_USER_EMAIL}"
    - git config --global user.name "${GITLAB_USER_NAME}"
    - git remote set-url origin https://oauth2:${JHARWELL_CI_TOKEN}@git.sift.net/${CI_PROJECT_PATH}
    - git tag ${BETA_TAG_VERSION} -m "$BETA_TAG_MESSAGE"
    - git push -o ci.skip origin ${BETA_TAG_VERSION} # don't trigger another run

    - curl --location --output /usr/local/bin/release-cli "https://gitlab.com/api/v4/projects/gitlab-org%2Frelease-cli/packages/generic/release-cli/latest/release-cli-linux-amd64"
    - chmod +x /usr/local/bin/release-cli
    - echo "release-cli create --name "${BETA_TAG_MESSAGE}" --tag-name $CI_COMMIT_TAG --assets-link "{\"name\":\"${RCPPSW_TGZ_PACKAGE}\",\"url\":\"${PACKAGE_REGISTRY_URL}/${RCPPSW_TGZ_PACKAGE}\"}" --assets-link"{\"name\":\"${RCPPSW_DEB_PACKAGE}\",\"url\":\"${PACKAGE_REGISTRY_URL}/${RCPPSW_DEB_PACKAGE}\"}""
    - release-cli
      create
      --name ${BETA_TAG_VERSION}
      --tag-name ${BETA_TAG_VERSION}
      --description "${BETA_TAG_MESSAGE}"
      --assets-link "{\"name\":\"${RCPPSW_TGZ_PACKAGE}\",\"url\":\"${PACKAGE_REGISTRY_URL}/${RCPPSW_TGZ_PACKAGE}\"}"
      --assets-link "{\"name\":\"${RCPPSW_DEB_PACKAGE}\",\"url\":\"${PACKAGE_REGISTRY_URL}/${RCPPSW_DEB_PACKAGE}\"}"

################################################################################
# Job to build documentation
################################################################################
pages:
  stage: package-and-deploy
  tags:
    - docker

  only:
    - master
    - devel

  script:
    - git submodule set-url libra ../libra.git
    - git submodule sync --recursive
    - git submodule foreach --recursive git fetch
    - git submodule update --init

    - mkdir -p build && cd build

    - cmake
      -DCMAKE_INSTALL_PREFIX=$HOME/.local
      ..
    - make apidoc

    - cd ..
    - export PATH=$PATH:$HOME/.local/bin

    - cd docs && make html && cd ..
    - cp -r docs/_build/html/ ./public/

  artifacts:
    paths:
      - public
