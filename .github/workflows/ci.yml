name: Build and test

on:
  push:
    branches:
      - master
      - devel

concurrency:
  group: "build-and-test"
  cancel-in-progress: true

jobs:
  build-and-test:
    runs-on: ubuntu-22.04
    container:
      image: jharwell/ubuntu22.04:2023-03-23
    strategy:
      matrix:
        build_type:
          - OPT
          - DEV

    steps:
      - uses: actions/checkout@v3
      - uses: ./.github/actions/rcsw-setup
      - name: Build=${{ matrix.build_type }}
        shell: bash
        run: |

          git config --global --add safe.directory /__w/rcppsw/rcppsw
          git submodule update --init --remote --recursive
          mkdir -p build && cd build

          cmake  \
          -DCMAKE_INSTALL_PREFIX=$HOME/.local \
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
          -DLIBRA_TESTS=yes \
          -DLIBRA_CODE_COV=YES \
          -DLIBRA_ER=ALL \
          ..

          make ticpp
          make build-and-test -j$(nproc)
          make coverage-report


      - name: Coverralls
        uses: coverallsapp/github-action@master
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          path-to-lcov: build/coverage.info

  docs:
    uses: ./.github/workflows/pages.yml
    needs:
      - build-and-test
    secrets: inherit

  tag-release:
    runs-on: ubuntu-latest
    needs:
      - build-and-test
    container:
      image: jharwell/ubuntu22.04:2023-03-23
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - uses: actions/checkout@v3

      - name: Push tag
        shell: bash
        run: |
          git config --global --add safe.directory /__w/rcppsw/rcppsw
          git config --global user.email "${{ github.event.pusher.email }}"
          git config --global user.name "${{ github.event.pusher.name }}"

          git submodule update --init --remote --recursive

          VERSION_MAJOR=$(sed -nE 's/.*PROJECT_VERSION_MAJOR ([0-9]+).*/\1/p' cmake/project-local.cmake)
          VERSION_MINOR=$(sed -nE 's/.*PROJECT_VERSION_MINOR ([0-9]+).*/\1/p' cmake/project-local.cmake)
          VERSION_PATCH=$(sed -nE 's/.*PROJECT_VERSION_PATCH ([0-9]+).*/\1/p' cmake/project-local.cmake)
          PACKAGE_VERSION=$VERSION_MAJOR.$VERSION_MINOR.$VERSION_PATCH

          if [ "${{ github.ref }}" = "refs/heads/devel" ]; then
            TAG_VERSION=${PACKAGE_VERSION}.beta
            TAG_MESSAGE="Development release ${TAG_VERSION}"
          else
            TAG_VERSION=${PACKAGE_VERSION}
            TAG_MESSAGE="Release ${TAG_VERSION}"
          fi
          git tag ${TAG_VERSION} -m "${TAG_MESSAGE}"
          git push -o ci.skip origin ${TAG_VERSION}
