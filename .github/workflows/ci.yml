name: Build and test

on:
  push:
    branches:
      - master
      - devel

concurrency:
  group: "build-and-test"
  cancel-in-progress: true

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    container:
      image: jharwell/ubuntu22.04:2023-04-12
    strategy:
      matrix:
        RCPPSW_AL_MT_SAFE_TYPES:
          - YES
          - NO

        LIBRA_ER:
          - ALL
          - FATAL
          - NONE

        CMAKE_BUILD_TYPE:
          - OPT
          - DEV

    steps:
      - name: Install RCSW
        shell: bash
        run: |
          curl -s --compressed "https://jharwell.github.io/ppa/KEY.gpg" | gpg --dearmor | sudo tee /etc/apt/trusted.gpg.d/ppa.gpg >/dev/null
          sudo curl -s --compressed -o /etc/apt/sources.list.d/ppa.list "https://jharwell.github.io/ppa/ppa.list"
          sudo apt update
          sudo apt-get install rcsw-dev

      - uses: actions/checkout@v3
      - name: Build=${{ matrix.CMAKE_BUILD_TYPE }}
        shell: bash
        run: |

          git config --global --add safe.directory $PWD
          git submodule update --init --remote --recursive
          mkdir -p build && cd build

          cmake  \
          -DCMAKE_INSTALL_PREFIX=$HOME/.local \
          -DCMAKE_BUILD_TYPE=${{ matrix.CMAKE_BUILD_TYPE }} \
          -DRCPPSW_AL_MT_SAFE_TYPES=${{ matrix.RCPPSW_AL_MT_SAFE_TYPES }} \
          -DLIBRA_ER=${{ matrix.LIBRA_ER }} \
          -DLIBRA_TESTS=yes \
          -DLIBRA_CODE_COV=YES \
          ..

          make ticpp
          make build-and-test -j$(nproc)
          make coverage-report


      - name: Coverralls
        uses: coverallsapp/github-action@master
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          path-to-lcov: build/coverage/coverage.info

  docs:
    uses: ./.github/workflows/pages.yml
    needs:
      - build-and-test
    secrets: inherit

  create-release:
    runs-on: ubuntu-latest
    needs:
      - build-and-test
    container:
      image: jharwell/ubuntu22.04:2023-04-12
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Install RCSW
        shell: bash
        run: |
          curl -s --compressed "https://jharwell.github.io/ppa/KEY.gpg" | gpg --dearmor | sudo tee /etc/apt/trusted.gpg.d/ppa.gpg >/dev/null
          sudo curl -s --compressed -o /etc/apt/sources.list.d/ppa.list "https://jharwell.github.io/ppa/ppa.list"
          sudo apt update
          sudo apt-get install rcsw-dev

      - uses: actions/checkout@v3
      - name: Build for release
        shell: bash
        run: |
          git config --global --add safe.directory $PWD
          git config --global user.email "${{ github.event.pusher.email }}"
          git config --global user.name "${{ github.event.pusher.name }}"
          echo "${{ github.ref }}"

          git submodule update --init --remote --recursive


          git changelog --start-tag 1.4.0 -n -x > changelog

          mkdir -p build && cd build

          cmake  \
          -DCMAKE_INSTALL_PREFIX=/usr \
          -DCMAKE_BUILD_TYPE=OPT \
          -DLIBRA_DEPS_PREFIX=/usr \
          -DLIBRA_ER=ALL \
          -DRCPPSW_AL_MT_SAFE_TYPES=YES \
          -DCPACK_PACKAGE_NAME=rcppsw-mt-er-opt \
          -DCPACK_STRIP_FILES=YES \
          ..

          make ticpp
          make package -j$(nproc)
          cmake  \
          -DCMAKE_INSTALL_PREFIX=/usr \
          -DLIBRA_DEPS_PREFIX=/usr \
          -DCMAKE_BUILD_TYPE=OPT \
          -DLIBRA_ER=NONE \
          -DRCPPSW_AL_MT_SAFE_TYPES=YES \
          -DCPACK_PACKAGE_NAME=rcppsw-mt-opt \
          -DCPACK_STRIP_FILES=YES \
          ..

          make package -j$(nproc)

          cmake  \
          -DCMAKE_INSTALL_PREFIX=/usr \
          -DLIBRA_DEPS_PREFIX=/usr \
          -DCMAKE_BUILD_TYPE=DEV \
          -DLIBRA_ER=ALL \
          -DRCPPSW_AL_MT_SAFE_TYPES=YES \
          -DCPACK_PACKAGE_NAME=rcppsw-mt-dev \
          -DCPACK_STRIP_FILES=YES \
          ..

          cmake  \
          -DCMAKE_INSTALL_PREFIX=/usr \
          -DLIBRA_DEPS_PREFIX=/usr \
          -DCMAKE_BUILD_TYPE=OPT \
          -DLIBRA_ER=ALL \
          -DRCPPSW_AL_MT_SAFE_TYPES=NO \
          -DCPACK_PACKAGE_NAME=rcppsw-er-opt \
          -DCPACK_STRIP_FILES=YES \
          ..

          make package -j$(nproc)
          cmake  \
          -DCMAKE_INSTALL_PREFIX=/usr \
          -DLIBRA_DEPS_PREFIX=/usr \
          -DCMAKE_BUILD_TYPE=OPT \
          -DLIBRA_ER=NONE \
          -DRCPPSW_AL_MT_SAFE_TYPES=NO \
          -DCPACK_PACKAGE_NAME=rcppsw-opt \
          -DCPACK_STRIP_FILES=YES \
          ..

          make package -j$(nproc)

          cmake  \
          -DCMAKE_INSTALL_PREFIX=/usr \
          -DLIBRA_DEPS_PREFIX=/usr \
          -DCMAKE_BUILD_TYPE=DEV \
          -DLIBRA_ER=ALL \
          -DRCPPSW_AL_MT_SAFE_TYPES=NO \
          -DCPACK_PACKAGE_NAME=rcppsw-dev \
          ..

          make package -j$(nproc)
          lintian *.deb


      - name: Tag release
        shell: bash
        run: |
          git config --global --add safe.directory $PWD
          git config --global user.email "${{ github.event.pusher.email }}"
          git config --global user.name "${{ github.event.pusher.name }}"

          git submodule update --init --remote --recursive

          VERSION_MAJOR=$(sed -nE 's/.*PROJECT_VERSION_MAJOR ([0-9]+).*/\1/p' cmake/project-local.cmake)
          VERSION_MINOR=$(sed -nE 's/.*PROJECT_VERSION_MINOR ([0-9]+).*/\1/p' cmake/project-local.cmake)
          VERSION_PATCH=$(sed -nE 's/.*PROJECT_VERSION_PATCH ([0-9]+).*/\1/p' cmake/project-local.cmake)
          PACKAGE_VERSION=$VERSION_MAJOR.$VERSION_MINOR.$VERSION_PATCH

          if [ "${{ github.ref }}" = "refs/heads/devel" ]; then
            RELEASE_VERSION=${PACKAGE_VERSION}.beta
            RELEASE_MESSAGE="Development release ${RELEASE_VERSION}"

            git tag ${RELEASE_VERSION} -m "${RELEASE_MESSAGE}" -f
            git push -o ci.skip origin ${RELEASE_VERSION} -f
          else
            RELEASE_VERSION=${PACKAGE_VERSION}.beta
            RELEASE_MESSAGE="Release ${RELEASE_VERSION}"

            git tag ${RELEASE_VERSION} -m "${RELEASE_MESSAGE}"
            git push -o ci.skip origin ${RELEASE_VERSION}
          fi
          echo "RELEASE_VERSION=${RELEASE_VERSION}" >> $GITHUB_ENV
          echo "RELEASE_MESSAppGE=${RELEASE_MESSAGE}" >> $GITHUB_ENV
          echo "PACKAGE_VERSION=${PACKAGE_VERSION}" >> $GITHUB_ENV

      - name: Github beta release
        if: github.ref == 'refs/heads/devel'
        uses: "marvinpinto/action-automatic-releases@latest"
        with:
          repo_token: "${{ secrets.GITHUB_TOKEN }}"
          automatic_release_tag: ${{ env.RELEASE_VERSION }}
          prerelease: true
          title: "${{ env.RELEASE_MESSAGE }}"
          files: |
              build/*.deb

      - name: Github release
        if: github.ref == 'refs/heads/master'
        uses: "marvinpinto/action-automatic-releases@latest"
        with:
          repo_token: "${{ secrets.GITHUB_TOKEN }}"
          automatic_release_tag: ${{ env.RELEASE_VERSION }}
          prerelease: false
          title: "${{ env.RELEASE_MESSAGE }}"
          files: |
              build/*.deb
      - name: Clone PPA
        uses: actions/checkout@v2
        with:
          repository: jharwell/ppa
          path: ppa
          token: ${{ secrets.RCPPSW_DEPLOY_TOKEN }}

      - name: Deploy to PPA
        shell: bash
        run: |
          cd ppa
          cp ../build/*.deb .
          ls -al ..
          echo  "${{ secrets.RCPPSW_GPG_SECRET_KEY }}" | base64 --decode | gpg --import
          ./scripts/update-packages.sh

          git config --global http.postBuffer 2097152000
          git config --global https.postBuffer 2097152000
          git add -A
          git commit -m "Deploy RCPPSW ${{ env.PACKAGE_VERSION }}"
          git remote set-url origin https://jharwell:${{ secrets.RCPPSW_DEPLOY_TOKEN }}@github.com/jharwell/ppa.git
          git push -u origin master
